<channel version="4.5.2">
  <id>faa69847-25ff-45d0-8aa9-d6bc203dad03</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>CSV Input</name>
  <description></description>
  <revision>37</revision>
  <sourceConnector version="4.5.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.5.2">
      <pluginProperties/>
      <pollConnectorProperties version="4.5.2">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>false</pollOnStart>
        <pollingFrequency>5000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="4.5.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <scheme>FILE</scheme>
      <host>C://Applications/Mirth/csvs</host>
      <fileFilter>*.csv</fileFilter>
      <regex>false</regex>
      <directoryRecursion>false</directoryRecursion>
      <ignoreDot>true</ignoreDot>
      <anonymous>true</anonymous>
      <username>anonymous</username>
      <password>anonymous</password>
      <timeout>10000</timeout>
      <secure>true</secure>
      <passive>true</passive>
      <validateConnection>true</validateConnection>
      <afterProcessingAction>DELETE</afterProcessingAction>
      <moveToDirectory></moveToDirectory>
      <moveToFileName></moveToFileName>
      <errorReadingAction>NONE</errorReadingAction>
      <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
      <errorMoveToDirectory></errorMoveToDirectory>
      <errorMoveToFileName></errorMoveToFileName>
      <checkFileAge>true</checkFileAge>
      <fileAge>1000</fileAge>
      <fileSizeMinimum>0</fileSizeMinimum>
      <fileSizeMaximum></fileSizeMaximum>
      <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
      <sortBy>date</sortBy>
      <binary>false</binary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
    </properties>
    <transformer version="4.5.2">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.2">
          <name>Retrieving Information from CSV</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>// Initialize an array to hold HL7 messages
var hl7Messages = [];

function splitAndTrim(inputString, word) {
    // Split the string at the specified word
    const parts = inputString.split(word);
    // Return everything before the word, trimmed of whitespace
    return parts[0].trim();
}
//SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(message);

logger.info(msg[&apos;row&apos;][0])
logger.info(msg[&apos;row&apos;][0][0])

// Loop through each row in the CSV
for (var i = 1; i &lt; msg[&apos;row&apos;].length; i++) {
    var row = msg[&apos;row&apos;][i]; // Get the current row
    
    // Extracting fields from the row
    var setID = splitAndTrim(row[&apos;SetID&apos;], &quot;column&quot;); // PID-1
    var patientID = splitAndTrim(row[&apos;PatientID&apos;], &quot;column&quot;); // PID-2
    var patientIdentifierList = splitAndTrim(row[&apos;PatientIdentifierList&apos;], &quot;column&quot;); // PID-3
    var alternatePatientID = splitAndTrim(row[&apos;AlternatePatientID&apos;], &quot;column&quot;); // PID-4
    var mothersMaidenName = splitAndTrim(row[&apos;MothersMaidenName&apos;], &quot;column&quot;); // PID-6
    var administrativeSex = splitAndTrim(row[&apos;AdministrativeSex&apos;], &quot;column&quot;); // PID-8
    var patientAlias = splitAndTrim(row[&apos;PatientAlias&apos;], &quot;column&quot;); // PID-9
    var race = splitAndTrim(row[&apos;Race&apos;], &quot;column&quot;); // PID-10
    var address = splitAndTrim(row[&apos;Address&apos;], &quot;column&quot;); // PID-11
    var phoneNumber = splitAndTrim(row[&apos;PhoneNumber&apos;], &quot;column&quot;); // PID-13
    var primaryLanguage = splitAndTrim(row[&apos;PrimaryLanguage&apos;], &quot;column&quot;); // PID-15
    var maritalStatus = splitAndTrim(row[&apos;MaritalStatus&apos;], &quot;column&quot;); // PID-16
    var religion = splitAndTrim(row[&apos;Religion&apos;], &quot;column&quot;); // PID-17
    var patientAccountNumber = splitAndTrim(row[&apos;PatientAccountNumber&apos;], &quot;column&quot;); // PID-18
    var ssnNumber = splitAndTrim(row[&apos;SSNNumber&apos;], &quot;column&quot;); // PID-19
    var driversLicenseNumber = splitAndTrim(row[&apos;DriversLicenseNumber&apos;], &quot;column&quot;); // PID-20
    var mothersIdentifier = splitAndTrim(row[&apos;MothersIdentifier&apos;], &quot;column&quot;); // PID-21
    var ethnicGroup = splitAndTrim(row[&apos;EthnicGroup&apos;], &quot;column&quot;); // PID-22

    // PV1 Segment Fields
    var pv1SetID = splitAndTrim(row[&apos;PV1SetID&apos;], &quot;column&quot;); // PV1-1
    var patientClass = splitAndTrim(row[&apos;PatientClass&apos;], &quot;column&quot;); // PV1-2
    var attendingDoctor = splitAndTrim(row[&apos;AttendingDoctor&apos;], &quot;column&quot;); // PV1-7
    var visitNumber = splitAndTrim(row[&apos;VisitNumber&apos;], &quot;column&quot;); // PV1-19
    var servicingFacility = splitAndTrim(row[&apos;ServicingFacility&apos;], &quot;column&quot;); // PV1-21
    var admitDateTime = splitAndTrim(row[&apos;AdmitDateTime&apos;], &quot;column&quot;); // PV1-44
    var dischargeDateTime = splitAndTrim(row[&apos;DischargeDateTime&apos;], &quot;column&quot;); // PV1-45

    // Create the HL7 message for this patient
    var hl7Message = &apos;MSH|^~\\&amp;|SendingApp|SendingFac|ReceivingApp|ReceivingFac|&apos; +
                     &apos;|&apos; + new Date().toISOString() + &apos;||ORM^O01|123456|P|2.5\n&apos; +
                     &apos;PID|&apos; + setID + &apos;||&apos; + patientID + &apos;||&apos; + patientIdentifierList + &apos;||&apos; + alternatePatientID + 
                     &apos;||&apos; + mothersMaidenName + &apos;|&apos; + administrativeSex + &apos;|&apos; + patientAlias + &apos;|&apos; + race + &apos;|&apos; +
                     address + &apos;|&apos; + phoneNumber + &apos;|&apos; + primaryLanguage + &apos;|&apos; + maritalStatus + &apos;|&apos; + religion + 
                     &apos;|&apos; + patientAccountNumber + &apos;|&apos; + ssnNumber + &apos;|&apos; + driversLicenseNumber + &apos;|&apos; + mothersIdentifier +
                     &apos;|&apos; + ethnicGroup + &apos;\n&apos; +
                     &apos;PV1|&apos; + pv1SetID + &apos;|&apos; + patientClass + &apos;|&apos; + attendingDoctor + &apos;|&apos; + visitNumber + 
                     &apos;|&apos; + servicingFacility + &apos;|&apos; + admitDateTime + &apos;|&apos; + dischargeDateTime + &apos;|\n&apos;;

    // Add the HL7 message to the array
    hl7Messages[i-1] = hl7Message;
}

// Store the array of messages in the channelMap
channelMap.put(&apos;hl7Messages&apos;, hl7Messages);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>DELIMITED</inboundDataType>
      <outboundDataType>HL7V3</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="4.5.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="4.5.2">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
          <numberedRows>false</numberedRows>
          <ignoreCR>true</ignoreCR>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="4.5.2">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="4.5.2">
          <splitType>Record</splitType>
          <batchSkipRecords>0</batchSkipRecords>
          <batchMessageDelimiter></batchMessageDelimiter>
          <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
          <batchGroupingColumn></batchGroupingColumn>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.5.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.5.2">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.5.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.5.2">
      <elements/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.5.2">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="4.5.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.5.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>// Retrieve the array of HL7 messages from the channelMap
var hl7Messages = channelMap.get(&apos;hl7Messages&apos;);

// Loop through the array and send each message individually
for (var j = 0; j &lt; hl7Messages.length; j++) {
   var hl7Message = hl7Messages[j];
   logger.info(hl7Message);
   var responseMessage;

   // Create a new message object to send
   var newMessage = new Packages.org.mirth.connect.model.Message();
   
   // Set the message content and other properties
   newMessage.setRawData(hl7Message); // Set the HL7 message as the raw data
   newMessage.setMetaData(new java.util.HashMap()); // Optional: add any metadata if needed

   // Create a new HL7 message object
   var hl7 = new Packages.ca.uhn.hl7v2.model.Message(); // Adjust this line based on your HL7 library

   // Parse the HL7 message into the object
   hl7.parse(hl7Message);

   // Send the message to the specified destination channel
   var channelIdToSend = &apos;78718d6c-14eb-4740-89fa-5f23ee5e87bc&apos;; // Replace with the target channel ID
   var channelMapToSend = new java.util.HashMap(); // Create a channelMap for the target channel

   // Send the message
   try {
       //ConnectorUtils.sendMessage(channelIdToSend, newMessage, channelMapToSend);
       responseMessage = router.routeMessageByChannelId(channelIdToSend, newMessage);
       logger.info(responseMessage);
   } catch (e) {
       logger.error(&quot;Error sending message to channel &quot; + channelIdToSend + &quot;: &quot; + e.message);
       logger.info(responseMessage);
   }
}
</script>
      </properties>
      <transformer version="4.5.2">
        <elements/>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.5.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.5.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.2">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.2">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="4.5.2">
      <metaDataId>2</metaDataId>
      <name>Destination 2</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.5.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.5.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>78718d6c-14eb-4740-89fa-5f23ee5e87bc</channelId>
        <channelTemplate>${message.transformedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="4.5.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.2">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>// Retrieve the array of HL7 messages from the channelMap
var hl7Messages = channelMap.get(&apos;hl7Messages&apos;);

// Loop through the array and send each message individually
if (hl7Messages) {
    for (var j = 0; j &lt; hl7Messages.length; j++) {
        var hl7Message = hl7Messages[j];

        // Create a new message object to send
        var newMessage = new Packages.org.mirth.connect.model.Message();
        
        // Set the message content and other properties
        newMessage.setRawData(hl7Message); // Set the HL7 message as the raw data
        newMessage.setMetaData(new java.util.HashMap()); // Optional: add any metadata if needed

        // Send the message to the specified destination channel
        var channelIdToSend = &apos;78718d6c-14eb-4740-89fa-5f23ee5e87bc&apos;; // Replace with the target channel ID
        var channelMapToSend = new java.util.HashMap(); // Create a channelMap for the target channel

        // Send the message
        try {
            ConnectorUtils.sendMessage(channelIdToSend, newMessage, channelMapToSend);
        } catch (e) {
            logger.error(&quot;Error sending message to channel &quot; + channelIdToSend + &quot;: &quot; + e.message);
        }
    }
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.5.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.5.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.2">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.5.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.5.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.2">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.5.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.5.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1727673344425</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>